class RSA:
    def __init__(self, prime1, prime2, relative_prime):
        self.prime1 = prime1
        self.prime2 = prime2
        self.e = relative_prime
        self.n = self.prime1 * self.prime2
        self.r = (self.prime1 - 1) * (self.prime2 - 1)
        
#checkPrimeNumber() method is used to check whether the two entered numbers are prime or not " 
    def checkPrimeNumber(self, a):
        if (a == 0 or a == 1):
            return True
        elif a > 1:
            for i in range(2, a): # To check if there is another factor other than 1
                if (a % i == 0):
                    return True

            else:
                return False
        else:
            return True

    def checkRelative_prime(self, a, b):
        for i in range(2, max(a, b)):
            if a % i == 0 and b % i == 0:
                return False
            else:
                return True
    def Encryption(self,text):
        if self.checkPrimeNumber(self.prime1) == False and self.checkPrimeNumber(self.prime2)== False:
            if self.checkRelative_prime(self.e, ((self.prime1 - 1) * (self.prime2 - 1))):
                public_key = (self.e,self.n)
                Pair_Slice = []
                for i in range(0, len(text), 2):
                    Pair_Slice.append(text.upper()[i: i + 2])

                set = " "
                for i in range(len(Pair_Slice)):
                    coll = " "
                    for j in Pair_Slice[i]:
                        c = ord(j) - 65
                        coll += str(c)

                    d = int(coll)**self.e % self.n
                    if len(str(d)) == 3:
                        set += "0" + str(d) + " "
                    else:
                        set += str(d) + " "
                print("The encrypted message is :", set)
            else:
                print("you entered in e is not correct for GCD(e,(prime1-1)*(prime2-1)) = 1 ")
        else:
            print("Error, You enter a non prime number")
    def Multi_Inverse(self, e, r):  # multiinverse function used to find inverse of e modulo q
        r = (self.prime1 - 1) * (self.prime2 - 1)
        m = e % r
        for x in range(1, r):
            if ((m * x) % r == 1):
                return x
        return 1
    def Decryption(self,encrypted):
        if self.checkPrimeNumber(self.prime1) == False and self.checkPrimeNumber(self.prime2)== False:
            if self.checkRelative_prime(self.e, ((self.prime1 - 1) * (self.prime2 - 1))):
                modinv = self.Multi_Inverse(self.e, self.r)
                private_key = (modinv,self.n)
                set = " "
                parts = encrypted.split()  # To split the encrypted message, where they differ with space
                for i in range(len(parts)):
                    result = (int(parts[i]) ** modinv) % self.n
                    if len(str(result)) % 2 != 0:
                        set += "0" + str(result) + " "
                    else:
                        set += str(result) + " "

                set1 = set.split()
                Pair_Slice = []
                for k in set1:
                    for i in range(0, len(k), 2):
                        Pair_Slice.append(k[i: i + 2])
                word = " "
                for i in Pair_Slice:
                    letter = chr(int(i) + 65)
                    word += letter
                print(" The decrypted String is: ", word)
            else:
                print("you entered in e is not correct for GCD(e,(prime1-1)*(prime2-1)) = 1 ")
        else:
            print("Error, You enter a non prime number")


def main():
    word = RSA(43,59,13)
    print(word.Encryption("stop"))
if __name__ == "__main__":
    main()



